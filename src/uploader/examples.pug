doctype html
html
    head
        include ../../doc/head.pug
        style.
            p.parsley-success, div.parsley-success {
                color: #468847;
                background-color: #DFF0D8;
                border: 1px solid #D6E9C6;
            }
            p.parsley-error, div.parsley-error {
                color: #B94A48;
                background-color: #F2DEDE;
                border: 1px solid #EED3D7;
            }
    body
        //- 示例
        form.row.mb20
            div.col-xs-6
                h3.fontsize-16 通过 <code>data-action</code> 指定接收文件的 URL。
                button.btn.btn-default(bx-name='components/uploader' data-action='api/upload.json' data-name='foo') 选择文件
                div.preview
                div.predefined
            div.col-xs-6
                h3.fontsize-16 通过 <code>data-name</code> 指定文件域的名称。
                button.btn.btn-default(bx-name='components/uploader' data-action='api/upload.json' data-name='bar') 选择文件
                div.preview
                div.predefined
        form.row.mb20
            div.col-xs-6
                h3.fontsize-16 通过 <code>iframe</code> 上传 <code>data-transport="iframe"</code>（不支持 <code>progress</code> 事件）
                button(bx-name="components/uploader" data-name="foo" data-action="api/upload.json" data-transport="iframe" type="button" class="btn btn-default")
                    span.glyphicon.glyphicon-open.mr5
                    span 选择文件
                div.preview
                div.predefined
            div.col-xs-6
                h3.fontsize-16 通过 <code>XHR</code> 上传 <code>data-transport="xhr"</code>（支持 <code>progress</code> 事件）
                button(bx-name="components/uploader" data-name="bar" data-action="api/upload.json" data-transport="xhr" type="button" class="btn btn-default")
                    span.glyphicon.glyphicon-open.mr5
                    span 选择文件
                div.progress.w300.mt10.mb10
                    div.progress-bar
                div.preview
                div.predefined
        form.row.mb20
            div.col-xs-6
                h3.fontsize-16 支持 brix-event，通过 <code>iframe</code> 上传
                button.btn.btn-default(bx-name='components/uploader' data-action='api/upload.json' data-name='baz' data-transport="iframe" 
                    on-start    = "console.log('>>> start', arguments)" 
                    on-progress = "console.log('>>> progress', arguments)" 
                    on-success  = "console.log('>>> success', arguments)" 
                    on-error    = "console.log('>>> error', arguments)" 
                    on-complete = "console.log('>>> complete', arguments)" 
                ) 选择文件
                div.preview
                div.predefined
            div.col-xs-6
                h3.fontsize-16 支持 brix-event，通过 <code>XHR</code> 上传
                button.btn.btn-default(bx-name='components/uploader' data-action='api/upload.json' data-name='baz' data-transport="xhr" 
                    on-start    = "console.log('>>> start', arguments)" 
                    on-progress = "console.log('>>> progress', arguments)" 
                    on-success  = "console.log('>>> success', arguments)" 
                    on-error    = "console.log('>>> error', arguments)" 
                    on-complete = "console.log('>>> complete', arguments)" 
                ) 选择文件
                div.preview
                div.predefined
        div.row.mb20
            div.col-xs-6
                h3.fontsize-16 如果没有用 <code>form</code> 元素包裹 Uploader 组件，则自动包裹一层 <code>&lt;form class="uploader-ghost-form"&gt;</code>。
                button.btn.btn-default(bx-name='components/uploader' data-action='api/upload.json' data-name='foo') 选择文件
                div.preview
                div.predefined
        //- 启动
        include ../../doc/boot.pug
        script.
            require(['brix/loader', 'jquery', 'brix/event'], function(Loader, $, EventManager) {
                Loader.boot(function() {
                    var instances = Loader.query('components/uploader')
                    instances.on('start.uploader', function(event, files) {
                        console.log(event.type, event.namespace, event.component)
                        var preview = $(event.target).parent().find('div.preview')
                        _.each(files, function(file /*, index*/ ) {
                            var reader = new FileReader()
                            reader.onload = function(event) {
                                var $img = $('<img>')
                                    .addClass('uploader-preview-thumbnail')
                                    .attr('src', event.target.result)
                                    .attr('title', file.name)
                                    .appendTo(preview)
                                    .attr('bx-name', 'components/popover')
                                    .attr('data-content', '<img src="' + event.target.result + '">')
                                    .attr('data-placement', 'bottom')
                                    .attr('data-align', 'left')
                                Loader.boot($img)
                            }
                            reader.readAsDataURL(file)
                        })
                        // event.preventDefault()
                    })
                    instances.on('progress.uploader', function(event, files, state, transport) {
                        console.log(event.type, event.namespace, files, state.loaded + '/' + state.total + 'B', state.percent + '%', transport)
                        var progress = $(event.target).parent().find('div.progress-bar')
                        progress.css('width', state.percent + '%')
                    })
                    instances.on('success.uploader', function(event, files, response, transport) {
                        console.log(event.type, event.namespace, files, response, transport)
                    })
                    instances.on('error.uploader', function(event, files, reason, transport) {
                        console.log(event.type, event.namespace, files, reason, transport)
                    })
                    instances.on('complete.uploader', function(event, files) {
                        console.log(event.type, event.namespace, files)
                    })

                    // EventManager
                    var $manager = new EventManager('on-')
                    $manager.delegate(document.body, {})
                })
            })
